name: code-build-deployment

on:
  push:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  code_test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: 18.x
          cache: "npm"
          cache-dependency-path: "**/package-lock.json"

      - uses: actions/cache/restore@v3
        id: cache
        with:
          path: |
            **/node_modules
          key: ${{ hashFiles('**/package-lock.json') }}

      - run: npm ci

      - run: npm run -w lib build

      - run: npm run test:coverage

      - run: npm run typecheck

      - run: npm run lint

      - name: archive coverage reports
        uses: actions/upload-artifact@v3
        with:
          name: coverage-reports
          path: public/coverage

      - uses: actions/cache/save@v3
        if: always()
        with:
          path: |
            **/node_modules
          key: ${{ steps.cache.outputs.cache-primary-key }}

  db_test:
    runs-on: ubuntu-latest
    env:
      MYSQL_DATABASE: my-home
      MYSQL_USER: service
      MYSQL_PASSWORD: password
      MYSQL_HOST_ON_DOCKER_NETWORK: localhost
      MYSQL_PORT_ON_DOCKER_NETWORK: 3306
    services:
      db:
        image: mariadb:10.11
        env:
          MYSQL_RANDOM_ROOT_PASSWORD: "yes"
          MYSQL_DATABASE: my-home
          MYSQL_USER: service
          MYSQL_PASSWORD: password
        options: >-
          --health-cmd "mysqladmin ping"
          --health-interval 10s
          --health-timeout 10s
          --health-retries 5
        ports:
          - 3306:3306
    steps:
      - uses: actions/checkout@v3

      - uses: actions/setup-go@v4
        with:
          go-version: "1.20"
          check-latest: true

      - name: Get Go Version
        id: get-go-version
        run: echo "version=$(go env GOVERSION)" >> $GITHUB_OUTPUT

      - name: Get Go Path
        id: get-go-path
        run: echo "path=$(go env GOPATH)" >> $GITHUB_OUTPUT

      - uses: actions/cache/restore@v3
        id: cache
        with:
          path: |
            ${{ steps.get-go-path.outputs.path }}/bin/migrate
            ${{ steps.get-go-path.outputs.path }}/bin/tbls
          key: ${{ steps.get-go-version.outputs.version }}-migrate-tbls

      - name: install migrate command
        id: install-migrate
        run: |
          if ! which migrate; then
            go install -tags 'mysql' github.com/golang-migrate/migrate/v4/cmd/migrate@latest
          fi
          echo "path=$(which migrate)" >> $GITHUB_OUTPUT

      - name: install tbls command
        id: install-tbls
        run: |
          if ! which tbls; then
            go install github.com/k1LoW/tbls@v1.71.1
          fi
          echo "path=$(which tbls)" >> $GITHUB_OUTPUT

      - name: test migrate up
        working-directory: ./packages/migrate
        run: make migrate-up

      - name: lint for database
        working-directory: ./packages/migrate
        run: make lint

      - name: make db document
        working-directory: ./packages/migrate
        run: make doc

      - name: test migrate down all
        working-directory: ./packages/migrate
        run: make migrate options="down -all"

      - name: archive db docs
        uses: actions/upload-artifact@v3
        with:
          name: db-docs
          path: public/database

      - uses: actions/cache/save@v3
        if: always()
        with:
          path: |
            ${{ steps.install-migrate.outputs.path }}
            ${{ steps.install-tbls.outputs.path }}
          key: ${{ steps.cache.outputs.cache-primary-key }}

  build:
    runs-on: ubuntu-latest
    needs: [code_test, db_test]
    permissions:
      packages: write
      contents: read
    strategy:
      matrix:
        app: [admin, dashboard, fetcher, migrate, notifier]
    steps:
      - uses: actions/checkout@v3
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build and push
        uses: docker/build-push-action@v4
        with:
          context: .
          file: packages/${{ matrix.app }}/Dockerfile
          push: ${{ github.ref == 'refs/heads/main' }}
          tags: |
            ghcr.io/${{ github.repository }}/${{ matrix.app }}:latest

  deploy_web:
    runs-on: ubuntu-latest
    needs: [build]
    if: github.ref == 'refs/heads/main'
    environment: production-web
    steps:
      - name: Deploy to web server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          port: ${{ secrets.SSH_PORT }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            cd ${{ vars.DEPLOY_DIR }}
            git pull origin main
            cd production/web
            docker-compose pull
            docker-compose up -d
            docker system prune -f

  deploy_public:
    runs-on: ubuntu-latest
    needs: [build]
    if: github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v3

      - name: Download coverage reports
        uses: actions/download-artifact@v3
        with:
          name: coverage-reports
          path: public/coverage

      - name: Download db docs
        uses: actions/download-artifact@v3
        with:
          name: db-docs
          path: public/database

      - name: Deploy to gh-pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./public
          enable_jekyll: true
