/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/api/line/v2/bot/message/push": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * LINEにプッシュメッセージを送信
         * @description LINEにプッシュメッセージを送信する。
         *     LINEのMessaging APIを利用しているため詳細はLINEのドキュメントを参照。
         *     - [Messaging API | チャンネルアクセストークンv2.1を発行する](https://developers.line.biz/ja/reference/messaging-api/#issue-channel-access-token-v2-1)
         *     - [Messaging API | プッシュメッセージを送る](https://developers.line.biz/ja/reference/messaging-api/#send-push-message)
         *
         */
        post: {
            parameters: {
                query?: never;
                header: {
                    /** @description LINEチャンネルID。 */
                    "X-MessagingGateway-Line-Channel-Id": string;
                };
                path?: never;
                cookie?: never;
            };
            /** @description 送信するメッセージ内容。
             *     Messaging API準拠。
             *     - [Messaging API | プッシュメッセージを送る | リクエストボディ](https://developers.line.biz/ja/reference/messaging-api/#send-push-message-request-body)
             *      */
            requestBody: {
                content: {
                    "application/json": {
                        /** @description 送信先のID。
                         *     Webhookイベントオブジェクトで返される `userId` `groupId` `roomId` のいずれかの値。
                         *      */
                        to: string;
                        /** @description 送信するメッセージ。
                         *     最大5件。
                         *      */
                        messages: components["schemas"]["MessageObject"][];
                        /** @description メッセージ送信時のユーザー通知有無。デフォルトは`false`。
                         *      */
                        notificationDisabled?: boolean;
                        /** @description 任意の集計単位のユニット名。
                         *      */
                        customAggregationUnits?: string[];
                    };
                };
            };
            responses: {
                /** @description メッセージ送信成功。Messaging APIのレスポンスをそのまま返却します。
                 *     - [Messaging API | プッシュメッセージを送る | レスポンス](https://developers.line.biz/ja/reference/messaging-api/#send-push-message-response)
                 *      */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description 送信したメッセージの配列。 */
                            sentMessages?: components["schemas"]["SentMessageObject"][];
                        };
                    };
                };
                /** @description メッセージ送信に失敗。
                 *     - LINEチャンネルIDが存在しない。
                 *     - LINE Messaging API が 400 を返した。
                 *      */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorObject"];
                    };
                };
                /** @description リクエスト数が上限を超過した。
                 *      */
                429: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorObject"];
                    };
                };
                /** @description 内部エラー */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorObject"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/line/webhook/{channelId}/messages/{messageId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * Webhookメッセージを削除
         * @description Webhookメッセージを削除する。
         */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description チャンネルID */
                    channelId: string;
                    /** @description メッセージID */
                    messageId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description 削除成功 */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": Record<string, never>;
                    };
                };
                /** @description 指定されたWebhookメッセージが見つからない */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorObject"];
                    };
                };
                /** @description 内部エラー */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorObject"];
                    };
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/line/webhook/{channelId}/messages/new": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 新たに処理すべきWebhookメッセージを取得
         * @description Webhookメッセージのうち指定コンシューマで新たに処理すべきものを取得する。
         *     取得対象メッセージは以下のもので、最大件数になるまで上から順に取得する。
         *     - 他コンシューマに配信済みメッセージのうちアイドル時間が最大アイドル時間を超えたもの
         *     - 未配信メッセージ
         *
         *     |配信済み？|コンシューマ|アイドル時間|配信回数|取得対象？|備考|
         *     |---|---|---|---|---|---|
         *     |未|-|-|-|◯|処理するため取得する。配信数は1となる。|
         *     |済|指定|-|-|✕|自身で処理中のため取得しない。|
         *     |済|他|最大以下|-|✕|他コンシューマに任せるため取得しない。|
         *     |済|他|最大超過|最大以下|◯|リトライするため取得する。配信数は+1。|
         *     |済|他|最大超過|最大超過|✕|リトライしても回復の見込みが無いためエラー扱い。|
         *
         */
        get: {
            parameters: {
                query: {
                    /** @description コンシューマ名。 */
                    consumer: string;
                    /** @description 取得件数の上限。省略時は上限なし扱い。 */
                    max_count?: number;
                    /** @description アイドル時間（ms）の上限。省略時は1分扱い。 */
                    max_idle_time_ms?: number;
                    /** @description 配信回数の上限。省略時は3回扱い。 */
                    max_delivery_count?: number;
                };
                header?: never;
                path: {
                    /** @description チャンネルID */
                    channelId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description 取得成功 */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Webhookメッセージのリスト。 */
                            messages?: components["schemas"]["WebhookMessageObject"][];
                        };
                    };
                };
                /** @description 必須パラメータの不足 */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorObject"];
                    };
                };
                /** @description 内部エラー */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorObject"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/line/webhook/{channelId}/events": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Webhookメッセージを追加（LINE Webhookの受け口）
         * @description LINEのWebhookからのPOSTリクエストを受信し、未読のWebhookメッセージとして保持する。
         *     POSTリクエストの仕様詳細はLINEのドキュメントを参照。
         *     - [Messaging API | Webhook](https://developers.line.biz/ja/reference/messaging-api/#webhooks)
         *
         */
        post: {
            parameters: {
                query?: never;
                header: {
                    /** @description 署名の検証に使う署名
                     *     - [Messaging API | 署名を検証する](https://developers.line.biz/ja/reference/messaging-api/#signature-validation)
                     *      */
                    "x-line-signature": string;
                };
                path: {
                    /** @description チャンネルID */
                    channelId: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        /** @description Webhookイベントを受信すべきボットのユーザーID。 */
                        destination: string;
                        /** @description Webhookイベントオブジェクトの配列。 */
                        events: components["schemas"]["WebhookEventObject"][];
                    };
                };
            };
            responses: {
                /** @description POSTリクエストの受信成功。
                 *      */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": Record<string, never>;
                    };
                };
                /** @description 必須パラメータの不足
                 *      */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorObject"];
                    };
                };
                /** @description 内部エラー
                 *      */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorObject"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /** @description メッセージ情報。LINE Messaging API に準拠。
         *     - [Messaging API | メッセージオブジェクト](https://developers.line.biz/ja/reference/messaging-api/#message-objects)
         *      */
        MessageObject: unknown;
        /** @description 送信したメッセージ情報。 */
        SentMessageObject: {
            /** @description 送信したメッセージのID。 */
            id: string;
            /** @description メッセージの引用トークン。 */
            quoteToken?: string;
        };
        /** @description LINEのWebhookイベントオブジェクト。
         *     - [Messaging API | Webhookイベントオブジェクト](https://developers.line.biz/ja/reference/messaging-api/#webhook-event-objects)
         *      */
        WebhookEventObject: unknown;
        /** @description LINEのWebhookで受信したメッセージ。 */
        WebhookMessageObject: {
            /** @description メッセージID。 */
            messageId?: string;
            /** @description アイドル時間（ms）。配信されてからの経過時間のこと。 */
            idleTimeMs?: number;
            /** @description 配信回数。 */
            deliveryCount?: number;
            /** @description WebhookのPOSTリクエスト受信時にmessaging-gatewayで発行したリクエストID。 */
            requestId: string;
            /** @description WebhookのPOSTリクエストで受信した署名。 */
            signature: string;
            /** @description Webhookイベントを受信すべきボットのユーザーID。 */
            destination: string;
            /** @description 受信したWebhookイベントオブジェクトの配列。 */
            events: components["schemas"]["WebhookEventObject"][];
        };
        /** @description エラー情報。 */
        ErrorObject: {
            message: string;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export type operations = Record<string, never>;
